const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function applyMigration() {
  try {
    console.log('\nüîÑ Application de la migration : ajout assurance et taxe fonci√®re\n');
    
    // V√©rifier si les colonnes existent d√©j√†
    const biens = await prisma.bien.findMany();
    
    if (biens.length > 0) {
      const premierBien = biens[0];
      if (premierBien.hasOwnProperty('assuranceMensuelle') && premierBien.hasOwnProperty('taxeFonciere')) {
        console.log('‚úÖ Les colonnes existent d√©j√† !');
        console.log('   - assuranceMensuelle');
        console.log('   - taxeFonciere');
        console.log('\nAucune action n√©cessaire.');
      } else {
        console.log('‚ö†Ô∏è  Les colonnes n\'existent pas encore.');
        console.log('   Ex√©cutez : npx prisma migrate deploy');
      }
    } else {
      console.log('‚ÑπÔ∏è  Aucun bien dans la base pour v√©rifier.');
      console.log('   Ex√©cutez : npx prisma migrate deploy');
    }
    
    console.log('\nüí° Pour appliquer la migration :');
    console.log('   cd backend');
    console.log('   npx prisma migrate deploy');
    console.log('   npx prisma generate');
    
  } catch (error) {
    if (error.message.includes('Unknown field')) {
      console.log('\n‚ùå Migration non appliqu√©e !');
      console.log('\nüìù Pour appliquer la migration :');
      console.log('   1. cd backend');
      console.log('   2. npx prisma migrate deploy');
      console.log('   3. npx prisma generate');
      console.log('   4. Red√©marrez le serveur');
    } else {
      console.error('‚ùå Erreur:', error.message);
    }
  } finally {
    await prisma.$disconnect();
  }
}

applyMigration();

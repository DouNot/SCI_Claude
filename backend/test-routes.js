/**
 * Script de test pour v√©rifier que les routes sont bien mont√©es
 * 
 * Usage: node test-routes.js
 */

const app = require('./server');

console.log('\nüîç V√âRIFICATION DES ROUTES MONT√âES\n');
console.log('='.repeat(60));

// R√©cup√©rer toutes les routes mont√©es
function printRoutes(stack, prefix = '') {
  stack.forEach((middleware) => {
    if (middleware.route) {
      // Route finale
      const methods = Object.keys(middleware.route.methods).join(', ').toUpperCase();
      console.log(`‚úÖ ${methods.padEnd(20)} ${prefix}${middleware.route.path}`);
    } else if (middleware.name === 'router') {
      // Router imbriqu√©
      const path = middleware.regexp.source
        .replace('\\/?', '')
        .replace('(?=\\/|$)', '')
        .replace(/\\\//g, '/')
        .replace(/\^/g, '')
        .replace(/\$/g, '');
      
      const cleanPath = path
        .replace(/\(\?:\(\[\^\\\/\]\+\?\)\)/g, ':param')
        .replace(/\\/g, '');
      
      console.log(`\nüì¶ Router: ${prefix}${cleanPath}`);
      if (middleware.handle.stack) {
        printRoutes(middleware.handle.stack, prefix + cleanPath);
      }
    }
  });
}

printRoutes(app._router.stack);

console.log('\n' + '='.repeat(60));
console.log('‚úÖ V√©rification termin√©e\n');

// Test de connectivit√©
console.log('üß™ Test de connectivit√©...\n');

const routes = [
  'POST /api/auth/login',
  'GET /api/spaces',
  'GET /api/spaces/:spaceId/projections',
  'POST /api/spaces/:spaceId/projections',
  'GET /api/spaces/:spaceId/rapports',
  'GET /api/spaces/:spaceId/comptes-bancaires',
];

console.log('Routes critiques √† v√©rifier :');
routes.forEach(route => {
  console.log(`  - ${route}`);
});

console.log('\nüí° Si certaines routes manquent, v√©rifiez :');
console.log('  1. Que les fichiers de routes existent dans src/routes/');
console.log('  2. Que les controllers sont bien export√©s');
console.log('  3. Que les routes sont bien require() dans server.js');
console.log('  4. Que app.use() est bien appel√© pour monter les routes\n');

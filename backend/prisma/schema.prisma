// NOUVEAU SCHEMA - Modèle Space-based
// Pour migrer : renommer schema.prisma en schema-old.prisma
// Puis renommer schema-new.prisma en schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================
// USERS & AUTH
// ============================================

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String    @map("password_hash")
  nom           String?
  prenom        String?
  emailVerified Boolean   @default(false) @map("email_verified")
  lastSpaceId   String?   @map("last_space_id")
  
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Relations
  spaceMembers  SpaceMember[]
  associes      Associe[]
  invitationsSent SpaceMember[] @relation("InvitedBy")
  
  @@map("users")
}

// ============================================
// SPACES (Workspaces)
// ============================================

model Space {
  id          String       @id @default(uuid())
  type        String       // PERSONAL ou SCI
  nom         String
  slug        String       @unique
  
  // SCI specific fields (nullable si PERSONAL)
  siret       String?      @unique
  capitalSocial Float?     @map("capital_social")
  formeJuridique String?   @default("SCI") @map("forme_juridique")
  dateCreation DateTime?   @map("date_creation")
  dateCloture String?      @map("date_cloture") // "31/12"
  regimeFiscal String?     @map("regime_fiscal") // "IR" ou "IS"
  adresse     String?
  objetSocial String?      @map("objet_social")
  
  // Metadata
  statut      String       @default("DRAFT") // DRAFT, ACTIVE, ARCHIVED
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  
  // Relations
  members     SpaceMember[]
  associes    Associe[]
  biens       Bien[]
  contacts    Contact[]
  locataires  Locataire[]
  assembleesGenerales AssembleeGenerale[]
  notifications Notification[]
  projections Projection[]
  rapportsAnnuels RapportAnnuel[]
  comptesBancaires CompteBancaire[]
  businessPlans BusinessPlan[]
  
  @@map("spaces")
}

// ============================================
// SPACE MEMBERS (Access Control)
// ============================================

model SpaceMember {
  id        String             @id @default(uuid())
  spaceId   String             @map("space_id")
  userId    String             @map("user_id")
  role      String             // OWNER, MANAGER, MEMBER, VIEWER, COMPTABLE
  statut    String             @default("PENDING") // PENDING, ACTIVE, SUSPENDED
  
  // Invitation
  invitationToken      String?   @unique @map("invitation_token")
  invitationSentAt     DateTime? @map("invitation_sent_at")
  invitationAcceptedAt DateTime? @map("invitation_accepted_at")
  invitedBy            String?   @map("invited_by")
  
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  
  // Relations
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviter   User?     @relation("InvitedBy", fields: [invitedBy], references: [id])
  
  @@unique([spaceId, userId])
  @@index([invitationToken])
  @@map("space_members")
}

// ============================================
// ASSOCIÉS (Cap Table)
// ============================================

model Associe {
  id        String         @id @default(uuid())
  spaceId   String         @map("space_id")
  userId    String?        @map("user_id") // NULL si associé externe
  
  // Identité (si userId = NULL)
  nom       String
  prenom    String
  email     String?
  telephone String?
  type      String         @default("PERSONNE_PHYSIQUE") // PERSONNE_PHYSIQUE, PERSONNE_MORALE
  
  // Participation
  nombreParts    Int         @map("nombre_parts")
  pourcentage    Float       // Auto-calculé
  valeurNominale Float?      @map("valeur_nominale")
  
  // Compte Courant Associé
  soldeCCA  Float          @default(0) @map("solde_cca")
  
  // Dates
  dateEntree DateTime      @map("date_entree")
  dateSortie DateTime?     @map("date_sortie")
  statut     String        @default("ACTIF") // ACTIF, SORTI
  
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  
  // Relations
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  mouvementsCCA MouvementCCA[]
  
  @@index([spaceId, statut])
  @@map("associes")
}

// ============================================
// MOUVEMENTS COMPTE COURANT ASSOCIÉ
// ============================================

model MouvementCCA {
  id          String   @id @default(uuid())
  associeId   String   @map("associe_id")
  type        String   // APPORT, RETRAIT, INTERETS
  montant     Float
  libelle     String
  date        DateTime
  reference   String?  // Numéro de virement, etc.
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  associe Associe @relation(fields: [associeId], references: [id], onDelete: Cascade)
  
  @@index([associeId, date])
  @@map("mouvements_cca")
}

// ============================================
// BIENS IMMOBILIERS
// ============================================

model Bien {
  id             String      @id @default(uuid())
  adresse        String
  ville          String
  codePostal     String
  pays           String      @default("France")
  type           String
  surface        Float
  nbPieces       Int?
  nbChambres     Int?
  etage          Int?
  prixAchat      Float
  fraisNotaire   Float?
  dateAchat      DateTime
  valeurActuelle Float?
  statut         String      @default("LIBRE")
  description    String?
  assuranceMensuelle Float?
  taxeFonciere   Float?
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  
  spaceId        String      @map("space_id")
  
  // Relations
  space          Space       @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  baux           Bail[]
  documents      Document[]
  factures       Facture[]
  locataires     Locataire[]
  photos         Photo[]
  prets          Pret[]
  travaux        Travaux[]
  evenementsFiscaux EvenementFiscal[]
  charges        Charge[]
  
  @@map("biens")
}

// Tous les autres modèles restent identiques
// Photo, Document, Pret, Locataire, Bail, Quittance, Facture, Travaux, etc.

model Photo {
  id        String   @id @default(uuid())
  url       String
  filename  String
  isPrimary Boolean  @default(false)
  ordre     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  bienId    String   @map("bien_id")
  bien      Bien     @relation(fields: [bienId], references: [id], onDelete: Cascade)
  
  @@map("photos")
}

model Document {
  id             String    @id @default(uuid())
  nom            String
  type           String
  url            String
  filename       String
  dateDocument   DateTime? @map("date_document")
  dateExpiration DateTime? @map("date_expiration")
  createdAt      DateTime  @default(now()) @map("created_at")
  bienId         String    @map("bien_id")
  bien           Bien      @relation(fields: [bienId], references: [id], onDelete: Cascade)
  
  @@map("documents")
}

model Pret {
  id            String   @id @default(uuid())
  montant       Float
  taux          Float
  duree         Int
  mensualite    Float
  tauxAssurance Float?   @map("taux_assurance")
  dateDebut     DateTime @map("date_debut")
  organisme     String
  numeroContrat String?  @map("numero_contrat")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  bienId        String   @map("bien_id")
  bien          Bien     @relation(fields: [bienId], references: [id], onDelete: Cascade)
  
  @@map("prets")
}

model Locataire {
  id             String    @id @default(uuid())
  typeLocataire  String    @default("ENTREPRISE") @map("type_locataire")
  raisonSociale  String?   @map("raison_sociale")
  siret          String?
  formeJuridique String?   @map("forme_juridique")
  capitalSocial  Float?    @map("capital_social")
  nom            String
  prenom         String
  email          String
  telephone      String?
  adresse        String?
  ville          String?
  codePostal     String?   @map("code_postal")
  dateNaissance  DateTime? @map("date_naissance")
  profession     String?
  dateEntree     DateTime? @map("date_entree")
  dateSortie     DateTime? @map("date_sortie")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  
  spaceId        String    @map("space_id")
  bienId         String?   @map("bien_id")
  
  // Relations
  space          Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  baux           Bail[]
  bien           Bien?     @relation(fields: [bienId], references: [id])
  
  @@index([spaceId])
  @@map("locataires")
}

model Bail {
  id            String      @id @default(uuid())
  typeBail      String      @map("type_bail")
  dateDebut     DateTime    @map("date_debut")
  dateFin       DateTime?   @map("date_fin")
  duree         Int
  loyerHC       Float       @map("loyer_hc")
  charges       Float?
  depotGarantie Float?      @map("depot_garantie")
  indexRevision String?     @map("index_revision")
  
  // Refacturation Taxe Foncière
  refactureTaxeFonciere Boolean @default(false) @map("refacture_taxe_fonciere")
  montantTaxeFonciere   Float?   @map("montant_taxe_fonciere") // Snapshot au moment de la création
  partRefactureTF       Float?   @map("part_refacture_tf") // Pourcentage refacturé (0-100)
  montantRefactureTF    Float?   @map("montant_refacture_tf") // Montant calculé automatiquement
  
  statut        String      @default("ACTIF")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  bienId        String      @map("bien_id")
  locataireId   String      @map("locataire_id")
  locataire     Locataire   @relation(fields: [locataireId], references: [id], onDelete: Cascade)
  bien          Bien        @relation(fields: [bienId], references: [id], onDelete: Cascade)
  quittances    Quittance[]
  
  @@map("baux")
}

model Quittance {
  id             String    @id @default(uuid())
  numeroQuittance String?  @unique @map("numero_quittance")
  mois           Int
  annee          Int
  montantLoyer   Float     @map("montant_loyer")
  montantCharges Float?    @map("montant_charges")
  montantTotal   Float     @map("montant_total")
  datePaiement   DateTime? @map("date_paiement")
  estPaye        Boolean   @default(false) @map("est_paye")
  createdAt      DateTime  @default(now()) @map("created_at")
  bailId         String    @map("bail_id")
  bail           Bail      @relation(fields: [bailId], references: [id], onDelete: Cascade)

  @@index([numeroQuittance])
  @@map("quittances")
}

model Facture {
  id              String    @id @default(uuid())
  numero          String?
  fournisseur     String
  montantTTC      Float     @map("montant_ttc")
  montantHT       Float?    @map("montant_ht")
  tva             Float?
  dateFacture     DateTime  @map("date_facture")
  datePaiement    DateTime? @map("date_paiement")
  categorie       String
  sousCategorie   String?   @map("sous_categorie")
  description     String?
  url             String?
  filename        String?
  estPaye         Boolean   @default(false) @map("est_paye")
  estDeductible   Boolean   @default(true) @map("est_deductible")
  adresseDetectee String?   @map("adresse_detectee")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  bienId          String    @map("bien_id")
  bien            Bien      @relation(fields: [bienId], references: [id], onDelete: Cascade)
  
  @@map("factures")
}

model Travaux {
  id          String    @id @default(uuid())
  titre       String
  description String?
  type        String
  categorie   String?
  dateDebut   DateTime  @map("date_debut")
  dateFin     DateTime? @map("date_fin")
  coutEstime  Float     @map("cout_estime")
  coutReel    Float?    @map("cout_reel")
  artisan     String?
  telephone   String?
  etat        String    @default("PLANIFIE")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  bienId      String    @map("bien_id")
  bien        Bien      @relation(fields: [bienId], references: [id], onDelete: Cascade)
  
  @@map("travaux")
}

model Contact {
  id         String   @id @default(uuid())
  nom        String
  prenom     String?
  entreprise String?
  type       String
  email      String?
  telephone  String?
  adresse    String?
  siteWeb    String?  @map("site_web")
  notes      String?
  evaluation Int?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  spaceId    String   @map("space_id")
  space      Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  
  @@map("contacts")
}

model AssembleeGenerale {
  id           String    @id @default(uuid())
  type         String
  dateAG       DateTime  @map("date_ag")
  titre        String?
  description  String?
  url          String
  filename     String
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  spaceId      String    @map("space_id")
  space        Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  
  @@map("assemblees_generales")
}

model EvenementFiscal {
  id            String    @id @default(uuid())
  type          String
  dateEcheance  DateTime  @map("date_echeance")
  montant       Float?
  datePaiement  DateTime? @map("date_paiement")
  estPaye       Boolean   @default(false) @map("est_paye")
  notes         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  bienId        String    @map("bien_id")
  bien          Bien      @relation(fields: [bienId], references: [id], onDelete: Cascade)
  
  @@map("evenements_fiscaux")
}

model Charge {
  id          String    @id @default(uuid())
  type        String
  libelle     String
  montant     Float
  frequence   String
  dateDebut   DateTime  @map("date_debut")
  dateFin     DateTime? @map("date_fin")
  jourPaiement Int?     @map("jour_paiement")
  estActive   Boolean   @default(true) @map("est_active")
  notes       String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  bienId      String?   @map("bien_id")
  bien        Bien?     @relation(fields: [bienId], references: [id], onDelete: Cascade)
  paiements   PaiementCharge[]
  
  @@map("charges")
}

model PaiementCharge {
  id            String    @id @default(uuid())
  datePaiement  DateTime  @map("date_paiement")
  montant       Float
  notes         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  chargeId      String    @map("charge_id")
  charge        Charge    @relation(fields: [chargeId], references: [id], onDelete: Cascade)
  
  @@map("paiements_charges")
}

model Notification {
  id          String    @id @default(uuid())
  type        String
  titre       String
  message     String
  priorite    String    @default("NORMALE")
  statut      String    @default("NON_LUE")
  dateEcheance DateTime? @map("date_echeance")
  lienType    String?   @map("lien_type")
  lienId      String?   @map("lien_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  spaceId     String    @map("space_id")
  space       Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// ============================================
// PROJECTIONS FINANCIÈRES
// ============================================

model Projection {
  id          String    @id @default(uuid())
  spaceId     String    @map("space_id")
  nom         String
  description String?
  scenario    String    @default("REALISTE") // OPTIMISTE, REALISTE, PESSIMISTE, PERSONNALISE
  dureeAnnees Int       @default(5) @map("duree_annees")
  dateDebut   DateTime  @map("date_debut")
  statut      String    @default("BROUILLON") // BROUILLON, ACTIVE, ARCHIVEE
  
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  space       Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  hypotheses  HypothesesProjection?
  donnees     DonneesProjection[]
  
  @@index([spaceId])
  @@index([spaceId, statut])
  @@map("projections")
}

model HypothesesProjection {
  id            String    @id @default(uuid())
  projectionId  String    @unique @map("projection_id")
  
  // Hypothèses générales
  tauxInflation            Float @default(2.0) @map("taux_inflation")
  tauxVacanceLocative      Float @default(5.0) @map("taux_vacance_locative")
  tauxAugmentationLoyer    Float @default(2.0) @map("taux_augmentation_loyer")
  tauxAugmentationCharges  Float @default(3.0) @map("taux_augmentation_charges")
  
  // Hypothèses de rentabilité
  tauxActualisation Float @default(4.0) @map("taux_actualisation")
  tauxImposition    Float @default(30.0) @map("taux_imposition")
  
  // Hypothèses de travaux
  provisionTravauxAnnuelle Float   @default(0) @map("provision_travaux_annuelle")
  travauxExceptionnels     String? @map("travaux_exceptionnels") // JSON
  
  // Hypothèses de revente
  inclureRevente         Boolean @default(false) @map("inclure_revente")
  anneeRevente           Int?    @map("annee_revente")
  tauxAppreciationBien   Float   @default(2.0) @map("taux_appreciation_bien")
  fraisVente             Float   @default(8.0) @map("frais_vente")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  projection Projection @relation(fields: [projectionId], references: [id], onDelete: Cascade)
  
  @@map("hypotheses_projection")
}

model DonneesProjection {
  id           String @id @default(uuid())
  projectionId String @map("projection_id")
  annee        Int
  mois         Int
  
  // Revenus
  revenusLocatifs Float @default(0) @map("revenus_locatifs")
  autresRevenus   Float @default(0) @map("autres_revenus")
  totalRevenus    Float @default(0) @map("total_revenus")
  
  // Charges
  chargesFixes      Float @default(0) @map("charges_fixes")
  chargesVariables  Float @default(0) @map("charges_variables")
  mensualitesPret   Float @default(0) @map("mensualites_pret")
  travaux           Float @default(0)
  impots            Float @default(0)
  totalCharges      Float @default(0) @map("total_charges")
  
  // Résultats
  cashflowNet    Float @default(0) @map("cashflow_net")
  cashflowCumule Float @default(0) @map("cashflow_cumule")
  
  // Patrimoine
  valeurBien       Float @default(0) @map("valeur_bien")
  capitalRestantDu Float @default(0) @map("capital_restant_du")
  patrimoineNet    Float @default(0) @map("patrimoine_net")
  
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  projection Projection @relation(fields: [projectionId], references: [id], onDelete: Cascade)
  
  @@index([projectionId, annee, mois])
  @@map("donnees_projection")
}

// ============================================
// RAPPORTS ANNUELS
// ============================================

model RapportAnnuel {
  id          String   @id @default(uuid())
  spaceId     String   @map("space_id")
  nom         String
  annee       Int
  type        String   @default("COMPLET") // COMPLET, SIMPLIFIE, FISCAL
  
  // Période du rapport
  dateDebut   DateTime @map("date_debut")
  dateFin     DateTime @map("date_fin")
  
  // Données calculées (JSON)
  donnees     String?  // Stockage JSON des données agrégées
  
  // Fichier généré
  urlPdf      String?  @map("url_pdf")
  filename    String?
  tailleFichier Int?   @map("taille_fichier") // en bytes
  
  // Métadonnées
  statut      String   @default("BROUILLON") // BROUILLON, GENERE, ARCHIVE
  generePar   String?  @map("genere_par") // userId
  dateGeneration DateTime? @map("date_generation")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  space       Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  
  @@index([spaceId])
  @@index([spaceId, annee])
  @@map("rapports_annuels")
}

// ============================================
// CONNEXION BANCAIRE
// ============================================

model CompteBancaire {
  id              String   @id @default(uuid())
  spaceId         String   @map("space_id")
  
  // Informations du compte
  nom             String
  banque          String
  iban            String?
  typeCompte      String   @map("type_compte") // COURANT, EPARGNE, PROFESSIONNEL
  devise          String   @default("EUR")
  
  // Soldes
  soldeActuel     Float    @default(0) @map("solde_actuel")
  soldeDisponible Float?   @map("solde_disponible")
  decouvertAutorise Float? @map("decouvert_autorise")
  
  // Connexion API
  provider        String?  // BRIDGE, TINK, PLAID, MANUAL
  accountId       String?  @map("account_id") // ID externe
  accessToken     String?  @map("access_token") // Token chiffré
  refreshToken    String?  @map("refresh_token")
  tokenExpiration DateTime? @map("token_expiration")
  
  // Synchronisation
  derniereSynchro DateTime? @map("derniere_synchro")
  autoSync        Boolean  @default(true) @map("auto_sync")
  frequenceSynchro Int     @default(24) @map("frequence_synchro") // heures
  
  // Métadonnées
  statut          String   @default("ACTIF") // ACTIF, SUSPENDU, ERREUR, DECONNECTE
  estPrincipal    Boolean  @default(false) @map("est_principal")
  notes           String?
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  space           Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  transactions    TransactionBancaire[]
  
  @@index([spaceId])
  @@index([accountId])
  @@map("comptes_bancaires")
}

model TransactionBancaire {
  id              String   @id @default(uuid())
  compteBancaireId String  @map("compte_bancaire_id")
  
  // Transaction
  date            DateTime
  dateValeur      DateTime? @map("date_valeur")
  libelle         String
  montant         Float
  devise          String   @default("EUR")
  
  // Catégorisation
  categorie       String?
  sousCategorie   String?  @map("sous_categorie")
  estRecurrent    Boolean  @default(false) @map("est_recurrent")
  
  // Réconciliation
  estReconcilie   Boolean  @default(false) @map("est_reconcilie")
  factureId       String?  @map("facture_id")
  quittanceId     String?  @map("quittance_id")
  chargeId        String?  @map("charge_id")
  
  // Données API
  transactionId   String?  @unique @map("transaction_id") // ID externe
  rawData         String?  @map("raw_data") // JSON brut de l'API
  
  // Métadonnées
  notes           String?
  etiquettes      String?  // JSON array de tags
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  compteBancaire  CompteBancaire @relation(fields: [compteBancaireId], references: [id], onDelete: Cascade)
  
  @@index([compteBancaireId])
  @@index([date])
  @@index([transactionId])
  @@index([estReconcilie])
  @@map("transactions_bancaires")
}

// ============================================
// BUSINESS PLANS
// ============================================

model BusinessPlan {
  id          String   @id @default(uuid())
  spaceId     String   @map("space_id")
  
  nom         String
  description String?
  
  // Type et objectif
  type        String   @default("ACQUISITION") // ACQUISITION, REFINANCEMENT, TRAVAUX
  montantDemande Float  @map("montant_demande")
  dureePret   Int      @map("duree_pret") // en mois
  tauxEstime  Float?   @map("taux_estime")
  
  // Période d'analyse
  dureeProjection Int  @default(10) @map("duree_projection") // années
  
  // Données calculées (JSON)
  donnees     String?  // Stockage JSON des calculs
  
  // Hypothèses personnalisées
  hypotheses  String?  // JSON
  
  // Fichier généré
  urlPdf      String?  @map("url_pdf")
  filename    String?
  tailleFichier Int?   @map("taille_fichier")
  
  // Métadonnées
  statut      String   @default("BROUILLON") // BROUILLON, GENERE, ENVOYE, VALIDE, REJETE
  generePar   String?  @map("genere_par")
  dateGeneration DateTime? @map("date_generation")
  dateSoumission DateTime? @map("date_soumission")
  
  // Banque
  banqueDestination String? @map("banque_destination")
  contactBanque     String? @map("contact_banque")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  space       Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  
  @@index([spaceId])
  @@index([statut])
  @@map("business_plans")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  nom       String
  prenom    String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comptes   Compte[]
}

model Compte {
  id          String    @id @default(uuid())
  nom         String
  type        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  associes    Associe[]
  biens       Bien[]
  contacts    Contact[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Associe {
  id               String   @id @default(uuid())
  nom              String
  prenom           String
  email            String?
  telephone        String?
  pourcentageParts Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  compteId         String
  compte           Compte   @relation(fields: [compteId], references: [id], onDelete: Cascade)
}

model Bien {
  id             String      @id @default(uuid())
  adresse        String
  ville          String
  codePostal     String
  pays           String      @default("France")
  type           String
  surface        Float
  nbPieces       Int?
  nbChambres     Int?
  etage          Int?
  prixAchat      Float
  fraisNotaire   Float?
  dateAchat      DateTime
  valeurActuelle Float?
  statut         String      @default("LIBRE")
  description    String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  compteId       String
  baux           Bail[]
  compte         Compte      @relation(fields: [compteId], references: [id], onDelete: Cascade)
  documents      Document[]
  factures       Facture[]
  locataires     Locataire[]
  photos         Photo[]
  prets          Pret[]
  travaux        Travaux[]
  evenementsFiscaux EvenementFiscal[]
}

model Photo {
  id        String   @id @default(uuid())
  url       String
  filename  String
  isPrimary Boolean  @default(false)
  ordre     Int      @default(0)  // Ajout pour l'ordre d'affichage
  createdAt DateTime @default(now())
  bienId    String
  bien      Bien     @relation(fields: [bienId], references: [id], onDelete: Cascade)
}

model Document {
  id             String    @id @default(uuid())
  nom            String
  type           String
  url            String
  filename       String
  dateDocument   DateTime?
  dateExpiration DateTime?
  createdAt      DateTime  @default(now())
  bienId         String
  bien           Bien      @relation(fields: [bienId], references: [id], onDelete: Cascade)
}

model Pret {
  id            String   @id @default(uuid())
  montant       Float
  taux          Float
  duree         Int
  mensualite    Float
  tauxAssurance Float?
  dateDebut     DateTime
  organisme     String
  numeroContrat String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bienId        String
  bien          Bien     @relation(fields: [bienId], references: [id], onDelete: Cascade)
}

model Locataire {
  id             String    @id @default(uuid())
  typeLocataire  String    @default("ENTREPRISE")
  raisonSociale  String?
  siret          String?
  formeJuridique String?
  capitalSocial  Float?
  nom            String
  prenom         String
  email          String
  telephone      String?
  adresse        String?
  ville          String?
  codePostal     String?
  dateNaissance  DateTime?
  profession     String?
  dateEntree     DateTime?
  dateSortie     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bienId         String?
  baux           Bail[]
  bien           Bien?     @relation(fields: [bienId], references: [id])
}

model Bail {
  id            String      @id @default(uuid())
  typeBail      String
  dateDebut     DateTime
  dateFin       DateTime?
  duree         Int
  loyerHC       Float
  charges       Float?
  depotGarantie Float?
  indexRevision String?
  statut        String      @default("ACTIF")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  bienId        String
  locataireId   String
  locataire     Locataire   @relation(fields: [locataireId], references: [id], onDelete: Cascade)
  bien          Bien        @relation(fields: [bienId], references: [id], onDelete: Cascade)
  quittances    Quittance[]
}

model Quittance {
  id             String    @id @default(uuid())
  mois           Int
  annee          Int
  montantLoyer   Float
  montantCharges Float?
  montantTotal   Float
  datePaiement   DateTime?
  estPaye        Boolean   @default(false)
  createdAt      DateTime  @default(now())
  bailId         String
  bail           Bail      @relation(fields: [bailId], references: [id], onDelete: Cascade)
}

model Facture {
  id              String    @id @default(uuid())
  numero          String?
  fournisseur     String
  montantTTC      Float
  montantHT       Float?
  tva             Float?
  dateFacture     DateTime
  datePaiement    DateTime?
  categorie       String
  sousCategorie   String?
  description     String?
  url             String?
  filename        String?
  estPaye         Boolean   @default(false)
  estDeductible   Boolean   @default(true)
  adresseDetectee String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bienId          String
  bien            Bien      @relation(fields: [bienId], references: [id], onDelete: Cascade)
}

model Travaux {
  id          String    @id @default(uuid())
  titre       String
  description String?
  type        String
  categorie   String?
  dateDebut   DateTime
  dateFin     DateTime?
  coutEstime  Float
  coutReel    Float?
  artisan     String?
  telephone   String?
  etat        String    @default("PLANIFIE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bienId      String
  bien        Bien      @relation(fields: [bienId], references: [id], onDelete: Cascade)
}

model Contact {
  id         String   @id @default(uuid())
  nom        String
  prenom     String?
  entreprise String?
  type       String
  email      String?
  telephone  String?
  adresse    String?
  siteWeb    String?
  notes      String?
  evaluation Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  compteId   String
  compte     Compte   @relation(fields: [compteId], references: [id], onDelete: Cascade)
}

model EvenementFiscal {
  id            String    @id @default(uuid())
  type          String
  dateEcheance  DateTime
  montant       Float?
  datePaiement  DateTime?
  estPaye       Boolean   @default(false)
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bienId        String
  bien          Bien      @relation(fields: [bienId], references: [id], onDelete: Cascade)
}